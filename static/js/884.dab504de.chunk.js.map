{"version":3,"file":"static/js/884.dab504de.chunk.js","mappings":"iOA4EA,UAnEqB,WAAO,IAAD,IACzB,GAAkCA,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAsBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,MAE3DC,EAAAA,EAAAA,YAAU,YACR,mCAAC,8GAE+BC,EAAAA,EAAAA,IAAaT,GAF5C,OAESU,EAFT,OAGGX,EAAaW,EAAcC,MAH9B,gDAKGC,QAAQC,IAAR,MALH,yDAAD,sDAQD,GAAE,CAACb,IAEJ,IACEc,EAKEhB,EALFgB,YACAC,EAIEjB,EAJFiB,MAFF,EAMIjB,EAHFkB,OAAAA,OAHF,MAGW,GAHX,EAIEC,EAEEnB,EAFFmB,SAJF,EAMInB,EADFoB,aAEIC,EAAcL,EA1BA,kCA0B8BA,EAAc,GAC1DM,GAAkC,SARxC,MAKiB,EALjB,IAQ4CC,UAE5C,OACE,4BACE,SAAC,KAAD,CAAMC,GAAIlB,EAAoBmB,QAA9B,mCAEA,4BACE,uCACA,0BACE,gBAAKC,IAAKL,EAAaM,IAAKV,OAE9B,4BACE,wBAAKA,KACL,wCAAgBK,EAAhB,QACA,sCACA,uBAAIH,KACJ,oCACA,uBACGD,EAAOU,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACV,0BAAkBA,GAAPA,EADD,aAMlB,4BACE,mDACA,2BACE,yBACE,SAAC,KAAD,CAAML,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAGJ,SAAC,EAAAM,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,WAKT,C,oKCxEKC,EAAU,mCACVC,EAAW,6BAEXC,EAAkB,YAGjB,SAASC,IACd,IAAMC,EAAU,CACdC,OAAQ,MACRC,IAAKL,EAPa,wBAQlBM,OAAQ,CACNC,QAASR,GAEXS,QAAS,CACPC,OAAQ,qBAIZ,OAAOC,EAAAA,EAAAA,QAAcP,EACtB,CAEM,IAAMzB,EAAe,SAAAT,GAC1B,IAAMkC,EAAU,CACdC,OAAQ,MACRC,IAAKL,EAAWC,EAAkBhC,EAClCqC,OAAQ,CACNC,QAASR,GAEXS,QAAS,CACPC,OAAQ,qBAIZ,OAAOC,EAAAA,EAAAA,QAAcP,EACtB,EAEYQ,EAAkB,SAAA1C,GAC7B,IAAMkC,EAAU,CACdC,OAAQ,MACRC,IAAI,GAAD,OAAKL,EAAWC,GAAhB,OAAkChC,EAAlC,YACHqC,OAAQ,CACNC,QAASR,GAEXS,QAAS,CACPC,OAAQ,qBAIZ,OAAOC,EAAAA,EAAAA,QAAcP,EACtB,EAEYS,EAAkB,SAAA3C,GAC7B,IAAMkC,EAAU,CACdC,OAAQ,MACRC,IAAI,GAAD,OAAKL,EAAWC,GAAhB,OAAkChC,EAAlC,YACHqC,OAAQ,CACNC,QAASR,GAEXS,QAAS,CACPC,OAAQ,qBAIZ,OAAOC,EAAAA,EAAAA,QAAcP,EACtB,EAEYU,EAAe,SAAAC,GAC1B,IAAMX,EAAU,CACdC,OAAQ,MACRC,IAAKL,EAjEiB,kBAkEtBM,OAAQ,CACNS,MAAOD,EACPP,QAASR,GAEXS,QAAS,CACPC,OAAQ,qBAIZ,OAAOC,EAAAA,EAAAA,QAAcP,EACtB,C","sources":["pages/MovieDetails.jsx","services/moviesApi.js"],"sourcesContent":["import { useState } from 'react';\nimport { useRef } from 'react';\nimport { Suspense } from 'react';\nimport { useEffect } from 'react';\nimport { Link, Outlet, useParams, useLocation } from 'react-router-dom';\nimport { getMovieInfo } from 'services/moviesApi';\n\nconst IMG_500W_PATH = 'https://image.tmdb.org/t/p/w500';\n\nconst MovieDetails = () => {\n  const [movieInfo, setMovieInfo] = useState([]);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    (async function fetchMovieInfo() {\n      try {\n        const fullMovieInfo = await getMovieInfo(movieId);\n        setMovieInfo(fullMovieInfo.data);\n      } catch (error) {\n        console.log(error);\n      }\n    })();\n  }, [movieId]);\n\n  const {\n    poster_path,\n    title,\n    genres = [],\n    overview,\n    vote_average = 0,\n  } = movieInfo;\n  const moviePoster = poster_path ? IMG_500W_PATH + poster_path : '';\n  const scorePercentage = (vote_average * 10).toFixed();\n\n  return (\n    <div>\n      <Link to={backLinkLocationRef.current}>&#129044; Go back</Link>\n\n      <div>\n        <h3>main info</h3>\n        <div>\n          <img src={moviePoster} alt={title} />\n        </div>\n        <div>\n          <h2>{title}</h2>\n          <p>User score: {scorePercentage}%</p>\n          <h3>Overview</h3>\n          <p>{overview}</p>\n          <h4>Genres</h4>\n          <p>\n            {genres.map(({ name }) => (\n              <span key={name}>{name}</span>\n            ))}\n          </p>\n        </div>\n      </div>\n      <div>\n        <p>Additional information</p>\n        <ul>\n          <li>\n            <Link to=\"cast\">Cast</Link>\n          </li>\n          <li>\n            <Link to=\"reviews\">Reviews</Link>\n          </li>\n        </ul>\n        <Suspense fallback={<div>Loading...</div>}>\n          <Outlet />\n        </Suspense>\n      </div>\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst API_KEY = 'cb35597b2b05bb14bc9f2fcf9c7c8175';\nconst BASE_URL = 'https://api.themoviedb.org';\nconst TRENDING_PATH = '/3/trending/movie/day';\nconst MOVIE_INFO_PATH = '/3/movie/';\nconst MOVIE_SEARCH_PATH = '/3/search/movie';\n\nexport function getTrendingMovies() {\n  const options = {\n    method: 'GET',\n    url: BASE_URL + TRENDING_PATH,\n    params: {\n      api_key: API_KEY,\n    },\n    headers: {\n      accept: 'application/json',\n    },\n  };\n\n  return axios.request(options);\n}\n\nexport const getMovieInfo = movieId => {\n  const options = {\n    method: 'GET',\n    url: BASE_URL + MOVIE_INFO_PATH + movieId,\n    params: {\n      api_key: API_KEY,\n    },\n    headers: {\n      accept: 'application/json',\n    },\n  };\n\n  return axios.request(options);\n};\n\nexport const getMovieCredits = movieId => {\n  const options = {\n    method: 'GET',\n    url: `${BASE_URL + MOVIE_INFO_PATH}${movieId}/credits`,\n    params: {\n      api_key: API_KEY,\n    },\n    headers: {\n      accept: 'application/json',\n    },\n  };\n\n  return axios.request(options);\n};\n\nexport const getMovieReviews = movieId => {\n  const options = {\n    method: 'GET',\n    url: `${BASE_URL + MOVIE_INFO_PATH}${movieId}/reviews`,\n    params: {\n      api_key: API_KEY,\n    },\n    headers: {\n      accept: 'application/json',\n    },\n  };\n\n  return axios.request(options);\n};\n\nexport const searchMovies = searchQuery => {\n  const options = {\n    method: 'GET',\n    url: BASE_URL + MOVIE_SEARCH_PATH,\n    params: {\n      query: searchQuery,\n      api_key: API_KEY,\n    },\n    headers: {\n      accept: 'application/json',\n    },\n  };\n\n  return axios.request(options);\n};\n"],"names":["useState","movieInfo","setMovieInfo","movieId","useParams","location","useLocation","backLinkLocationRef","useRef","state","from","useEffect","getMovieInfo","fullMovieInfo","data","console","log","poster_path","title","genres","overview","vote_average","moviePoster","scorePercentage","toFixed","to","current","src","alt","map","name","Suspense","fallback","API_KEY","BASE_URL","MOVIE_INFO_PATH","getTrendingMovies","options","method","url","params","api_key","headers","accept","axios","getMovieCredits","getMovieReviews","searchMovies","searchQuery","query"],"sourceRoot":""}